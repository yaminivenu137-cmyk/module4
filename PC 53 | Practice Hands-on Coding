import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MaterialApp(debugShowCheckedModeBanner: false, home: AuthGate()));
}

/// ----------------------
/// AUTHENTICATION SCREEN
/// ----------------------
class AuthGate extends StatefulWidget {
  @override
  _AuthGateState createState() => _AuthGateState();
}

class _AuthGateState extends State<AuthGate> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  bool isLogin = true;

  Future<void> _authenticate() async {
    try {
      if (isLogin) {
        await FirebaseAuth.instance.signInWithEmailAndPassword(
          email: _emailController.text.trim(),
          password: _passwordController.text.trim(),
        );
      } else {
        await FirebaseAuth.instance.createUserWithEmailAndPassword(
          email: _emailController.text.trim(),
          password: _passwordController.text.trim(),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Error: $e")));
    }
  }

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        if (snapshot.hasData) {
          return TodoScreen();
        }
        return Scaffold(
          appBar: AppBar(title: Text(isLogin ? "Login" : "Sign Up")),
          body: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                TextField(
                  controller: _emailController,
                  decoration: InputDecoration(labelText: "Email"),
                ),
                SizedBox(height: 10),
                TextField(
                  controller: _passwordController,
                  decoration: InputDecoration(labelText: "Password"),
                  obscureText: true,
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: _authenticate,
                  child: Text(isLogin ? "Login" : "Sign Up"),
                ),
                TextButton(
                  onPressed: () {
                    setState(() {
                      isLogin = !isLogin;
                    });
                  },
                  child: Text(isLogin
                      ? "Don't have an account? Sign Up"
                      : "Already have an account? Login"),
                )
              ],
            ),
          ),
        );
      },
    );
  }
}

/// ----------------------
/// TODO SCREEN
/// ----------------------
class TodoScreen extends StatefulWidget {
  @override
  _TodoScreenState createState() => _TodoScreenState();
}

class _TodoScreenState extends State<TodoScreen> {
  final TextEditingController _todoController = TextEditingController();
  final CollectionReference todosCollection =
      FirebaseFirestore.instance.collection("todos");

  Future<void> _addTodo() async {
    if (_todoController.text.isEmpty) return;
    final user = FirebaseAuth.instance.currentUser;
    await todosCollection.add({
      "task": _todoController.text,
      "userId": user!.uid,
      "timestamp": Timestamp.now(),
      "done": false,
    });
    _todoController.clear();
  }

  Future<void> _toggleDone(String docId, bool currentStatus) async {
    await todosCollection.doc(docId).update({"done": !currentStatus});
  }

  Future<void> _deleteTodo(String docId) async {
    await todosCollection.doc(docId).delete();
  }

  @override
  Widget build(BuildContext context) {
    final user = FirebaseAuth.instance.currentUser;
    return Scaffold(
      appBar: AppBar(
        title: Text("GET IT DONE"),
        actions: [
          IconButton(
              icon: Icon(Icons.logout),
              onPressed: () => FirebaseAuth.instance.signOut())
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _todoController,
                    decoration: InputDecoration(
                        labelText: "Add a task",
                        border: OutlineInputBorder()),
                  ),
                ),
                SizedBox(width: 10),
                ElevatedButton(onPressed: _addTodo, child: Text("Add"))
              ],
            ),
          ),
          Expanded(
            child: StreamBuilder<QuerySnapshot>(
              stream: todosCollection
                  .where("userId", isEqualTo: user!.uid)
                  .orderBy("timestamp", descending: true)
                  .snapshots(),
              builder: (context, snapshot) {
                if (!snapshot.hasData) {
                  return Center(child: CircularProgressIndicator());
                }
                final todos = snapshot.data!.docs;
                if (todos.isEmpty) {
                  return Center(child: Text("No tasks yet!"));
                }
                return ListView.builder(
                  itemCount: todos.length,
                  itemBuilder: (context, index) {
                    final todo = todos[index];
                    final data = todo.data() as Map<String, dynamic>;
                    return ListTile(
                      leading: Checkbox(
                        value: data["done"],
                        onChanged: (_) =>
                            _toggleDone(todo.id, data["done"] ?? false),
                      ),
                      title: Text(
                        data["task"],
                        style: TextStyle(
                            decoration: data["done"]
                                ? TextDecoration.lineThrough
                                : null),
                      ),
                      trailing: IconButton(
                        icon: Icon(Icons.delete, color: Colors.red),
                        onPressed: () => _deleteTodo(todo.id),
                      ),
                    );
                  },
                );
              },
            ),
          )
        ],
      ),
    );
  }
}
